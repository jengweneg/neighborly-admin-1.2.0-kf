- content_for :title, t('.title')
.admin
  .row
    = render 'neighborly/admin/layouts/menu'
    section.content.large-12.columns
      .filters
        = form_tag contributions_path, method: :get, class: 'form-horizontal' do |f|
          .row
            .large-3.columns
              = label_tag :by_user_id, t('.user_id')
              = text_field_tag :by_user_id, params[:by_user_id], class: 'input-small'
            .large-3.columns
              = label_tag :between_values, t('.between_values')
              = text_field_tag 'between_values[start_at]', (params[:between_values][:start_at] if params[:between_values].present?), class: 'input-small'
              | &nbsp;
              | &nbsp;
              = text_field_tag 'between_values[ends_at]', (params[:between_values][:ends_at] if params[:between_values].present?), class: 'input-small'
            .large-3.columns
              = label_tag :with_state, t('.by_state')
              = select_tag :with_state, options_for_select(Contribution.state_names, params[:with_state]), include_blank: true
            .large-3.columns
              = label_tag :by_key, t('.key')
              = text_field_tag :by_key, params[:by_key]
            .large-6.columns
              = label_tag :project_name_contains, t('.project')
              = text_field_tag :project_name_contains, params[:project_name_contains]
            .large-6.columns
              = label_tag :user_name_contains, t('.user')
              = text_field_tag :user_name_contains, params[:user_name_contains], class: 'input-medium'
            .large-6.columns
              = label_tag :user_email_contains, t('.user_email')
              = text_field_tag :user_email_contains, params[:user_email_contains], class: 'input-medium'
            .large-6.columns.text-left
              = check_box_tag :credits, :true, params[:credits]
              = label_tag :credits, t('.credits')
            .large-6.columns.text-right
              = submit_tag t('.submit'), class: 'button'

      .row
        .large-6.columns.text-left
          = paginate @contributions
        .large-6.columns.text-right
          = pluralize_without_number collection.count, t('words.found_singular'), t('words.found_plural')
          | &nbsp;
          strong= collection.count
          | &nbsp;
          = pluralize_without_number(collection.count, t('words.contribution_singular'), t('words.contribution_plural')).downcase
      - if @contributions.empty?
        = t('.no_contributions')
      - else
        table
          thead
            tr
              th= t('.info')
              th= t('.project')
              th= t('.user')
              th= t('.value')
              th= t('.reward')
              th= t('.key')
              th= t('.anonymous')
              th= t('.credits')
              th= t('.state')
              th
          tbody
            - @contributions.includes(:project, :user, :reward).each do |contribution|
              tr id=contribution.id
                td
                  .reveal-modal.small.fixed id="contribution-info-#{contribution.id}"
                    a.close-reveal-modal Ã—
                    h5 = t('.contribution_info', key: contribution.key)
                    .modal-body style='text-align: left'
                      p
                        strong= t('.payment_method')
                        | &nbsp;
                        = contribution.payment_method
                      p
                        strong= t('.payment_fee')
                        | &nbsp;
                        = number_to_currency contribution.payment_service_fee
                      p
                        strong= t('.fee_paid_by_user')
                        | &nbsp;
                        = contribution.payment_service_fee_paid_by_user ? t('words._yes') : t('words._no')
                      p
                        strong= t('.payment_id')
                        | &nbsp;
                        = contribution.payment_id
                      p
                        strong= t('.user_email')
                        | &nbsp;
                        = contribution.user.email
                      p
                        strong= t('.created_at')
                        | &nbsp;
                        = l(contribution.created_at)

                  = link_to "#contribution-info-#{contribution.id}", class: 'button tiny secondary', data: { 'reveal-id' => "contribution-info-#{contribution.id}" } do
                    i.icon-et-info-circled
                td title=contribution.project.name
                  = link_to main_app.project_path(contribution.project) do
                    = image_tag contribution.project.display_image, size: '100x100'
                td title=contribution.user.display_name
                  = link_to main_app.user_path(contribution.user) do
                    = contribution.user.display_image_html width: 50, height: 50
                  .user_id= best_in_place contribution, :user_id, type: :input
                td= best_in_place contribution, :value, type: :input
                td title=("#{contribution.reward.display_minimum} - #{contribution.reward.description}" if contribution.reward)
                  - if contribution.reward
                    = contribution.reward.display_minimum
                  - else
                    | -
                  | &nbsp;
                  = link_to 'javascript:void(0);', class: 'button tiny secondary', data: {dropdown: "dropdown-reward-#{contribution.id}"} do
                    i.icon-et-down-dir
                  ul[id="dropdown-reward-#{contribution.id}" data-dropdown-content class="f-dropdown"]
                    li title=("#{t('.no_reward')}" ) = link_to t('.no_reward'), change_reward_contribution_path(contribution, reward_id: nil), method: :put
                    - contribution.available_rewards.each do |reward|
                      li title=("#{reward.display_minimum} - #{reward.description}" ) = link_to reward.minimum_value, change_reward_contribution_path(contribution, reward_id: reward.id, local_params: params), method: :put

                td.key= contribution.key
                td.checkbox= best_in_place contribution, :anonymous, type: :checkbox, collection: [t('words._no'), t('words._yes')]
                td= (contribution.credits ? t('words._yes') : t('words._no'))
                td= contribution.state
                td
                  = link_to 'javascript:void(0);', class: 'button tiny secondary', data: {dropdown: "dropdown-#{contribution.id}"} do
                    i.icon-et-down-dir
                ul[id="dropdown-#{contribution.id}" data-dropdown-content class="f-dropdown"]
                  - if contribution.confirmed?
                    li= link_to t('admin.contributions.index.unconfirm_contribution'), pendent_contribution_path(contribution, local_params: params), method: :put
                  - else
                    li= link_to t('admin.contributions.index.confirm_contribution'), confirm_contribution_path(contribution, local_params: params), method: :put
                  - if contribution.requested_refund? or contribution.confirmed?
                    li= link_to t('admin.contributions.index.refund_contribution'), refund_contribution_path(contribution, local_params: params), method: :put
                  li= link_to t('admin.contributions.index.refund_and_hide'), hide_contribution_path(contribution, local_params: params), method: :put
                  li= link_to t('admin.contributions.index.cancel'), cancel_contribution_path(contribution, local_params: params), method: :put
                  li= link_to t('admin.contributions.index.push_to_trash'), push_to_trash_contribution_path(contribution, local_params: params), method: :put
      = paginate @contributions

